import java.util.*;

class Vulnerability {
    public static int findVulnerabilityFactor(List<Integer> key, int maxChange) {
        int n = key.size();
        int lo = 0, hi = key.size()/(maxChange+1);
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if(changesForLength(key, mid) > maxChange){
                lo = mid+1;
            }else{
                hi = mid;
            }
        }

        return key.isEmpty() ? 0 : lo;
    }

    public static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }

    public static int changesForLengthNaive(List<Integer> key, int l){
        int inv = l+1;
        int lastChange = -1, changes = 0;

        for(int i=0; i+inv<= key.size(); i++){
            int c = key.get(i);
            for(int j=i+1; j < i+inv; j++){
                c = gcd(c, key.get(j));
            }
            if(c != 1){
                lastChange = i+inv-1;
                changes++;
                i = lastChange+1;
            }
        }
        return changes;
    }

    public static int changesForLength(List<Integer> key, int l){
        int inv = l+1, n = key.size();
        int lastChange = -1, changes = 0;

        int gcds[] = new int[n];

        for(int mark = 0; mark < n; mark += inv){
            gcds[mark] = key.get(mark);
            for(int d=1; d<inv; d++){
                if(mark+d < n)
                gcds[mark+d] = gcd(key.get(mark+d), gcds[mark+d-1]);
                if(mark-d > lastChange)
                gcds[mark-d] = gcd(key.get(mark-d), gcds[mark-d+1]);
            }
            for(int i = Math.max(lastChange+1, mark-l); i <= mark && i+l < n; i++){
                if(gcd(gcds[i], gcds[i+l]) > 1){
                    lastChange = i+l;
                    changes++;
                    break;
                }
            }
        }
        return changes;
    }

    public static void main(String args[]){
        test1();
        test2();
    }

    static void test1(){
        List<Integer> key = Arrays.asList(6, 15, 10, 5, 35);
        int change = 0;
        assert findVulnerabilityFactor(key, change)== 4;
    }
    static void test2(){
        List<Integer> key = Arrays.asList(1, 1, 1, 1, 1);
        int change = 0;
        assert findVulnerabilityFactor(key, change)== 0;
    }
}
